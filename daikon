#!/usr/bin/env python

import argparse
from modules import es_index, es_config

VERSION = '0.02'


def main():
    parser_main = argparse.ArgumentParser(description='ElasticSearch CLI v'
            + VERSION)

    parser_main.add_argument('--version', action='version',
            version=VERSION)

    parser_main.add_argument('--cluster')

    subparsers_main = parser_main.add_subparsers(title='subcommands',
            description='valid subcommands', help='additional help')

    # index

    subparser_index = subparsers_main.add_parser('index')
    subparser_index = subparser_index.add_subparsers(title='subcommands',
            description='valid subcommands', help='additional help')

    # index create

    subparser_index_create = subparser_index.add_parser('create')
    subparser_index_create.add_argument('indexname')
    subparser_index_create.add_argument('--cluster')
    subparser_index_create.add_argument('--shards')
    subparser_index_create.add_argument('--replicas')

    #subparser_index_create.add_argument('indexname', destination=index_create(args.cluster, args.cluster, args.shards, args.replicas)
    #def index_create(host, indexname, shards, replicas):

    # index delete

    subparser_index_delete = subparser_index.add_parser('delete')
    subparser_index_delete.add_argument('indexname')
    subparser_index_delete.add_argument('--cluster')

    # index health

    subparser_index_health = subparser_index.add_parser('health')
    subparser_index_health.add_argument('indexname')
    subparser_index_health.add_argument('--cluster')

    # cluster

    subparser_cluster = subparsers_main.add_parser('cluster')
    subparser_cluster = subparser_cluster.add_subparsers(title='subcommands',
            description='valid subcommands', help='additional help')

    # cluster health

    subparser_cluster_health = subparser_cluster.add_parser('health')
    subparser_cluster_health.add_argument('--cluster')

    # cluster state

    subparser_cluster_state = subparser_cluster.add_parser('state')
    subparser_cluster_state.add_argument('--cluster')

    # cluster shutdown

    subparser_cluster_shutdown = subparser_cluster.add_parser('shutdown')
    subparser_cluster_shutdown.add_argument('--cluster')

    # nodes

    subparser_nodes = subparsers_main.add_parser('nodes')
    subparser_nodes = subparser_nodes.add_subparsers(title='subcommands',
            description='valid subcommands', help='additional help')

    # nodes stats

    subparser_nodes_stats = subparser_nodes.add_parser('stats')
    subparser_nodes_stats.add_argument('hostname')
    subparser_nodes_stats.add_argument('--cluster')

    # nodes shutdown

    subparser_nodes_shutdown = subparser_nodes.add_parser('shutdown')
    subparser_nodes_shutdown.add_argument('hostname')
    subparser_nodes_shutdown.add_argument('--delay')
    subparser_nodes_shutdown.add_argument('--cluster')

    # end

    args = parser_main.parse_args()
    es_config.configuration(args.cluster)

    if args.shards is None:
        args.shards = config["shards"]
        print args.shards

    if args.replicas is None:
        args.replicas = config["replicas"]
        print args.replicas

if __name__ == "__main__":
    main()
